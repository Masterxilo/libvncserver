#!/bin/bash
. ./bash_lib

echo "building..."

# dependencies
# inspired by https://github.com/LibVNC/libvncserver/blob/master/.travis.yml
# and cmake messages about missing png/jpeg libs...
# as well as various possible crypto libraries, though it is probably far
# preferable to handle encryption and authorization through tunneling 
# on a separate layer!
if ! test -f ./_dependencies_where_installed ; then
    sudo apt-get update
    sudo apt-get --assume-yes \
        --no-install-suggests \
        --no-install-recommends \
        install \
            cmake \
            build-essential \
            libsdl2-dev \
            liblzo2-dev \
            gnutls-dev \
            libgcrypt-dev \
            libssl-dev \
            libpng-dev \
            libjpeg-dev
    touch _dependencies_where_installed
fi

# fetch submodules
if ! test -f ./webclients/novnc/vnc.html ; then
    git submodule init
    git submodule update
fi

(
# build steps from ORIGINAL.README.md, except mkdir -p build so that build existing is not a problem [[
mkdir -p build
cd build
cmake ..
cmake --build .
# ]]
)

# to make example's http server work, 
#  rfbScreen->httpDir = "../webclients";
# must exist, which, if you cd into ./build/examples should be at
#   ./build/examples/../webclients = ./build/webclients
if ! test -d "./build/webclients" ; then
    ln -s "$(realpath ./webclients)" "./build/webclients"
fi

# copy rfb header files over, so that there is not just rfbconfig.h there
cp ./rfb/* ./build/rfb

# build just simple.c :
#  -l./build/libvncserver
# note: https://stackoverflow.com/a/12748882/524504
# > Recent versions of GCC require that you put the object files and libraries in the order that they depend on each other
# needs that 
#   -L./build -lvncserver
# appears last!
gcc -I./build ./examples/simple.c -o simple -L./build -lvncserver

echo "ldd ./simple before copy .so:"
ldd ./simple
#       libvncserver.so.1 => /lib/x86_64-linux-gnu/libvncserver.so.1 (0x00007f282d5ee000)
md5sum /lib/x86_64-linux-gnu/libvncserver.so.1

# maybe we have to explicitly do the following to update the shared library version that will be used:
sudo cp ./build/libvncserver.so.1 /lib/x86_64-linux-gnu/libvncserver.so.1

echo "ldd ./simple after copy .so:"
ldd ./simple
md5sum /lib/x86_64-linux-gnu/libvncserver.so.1

# or, it seems if it is found in the current folder (no that does not work) or any above it will override?
# why does
#   ldd ./build/examples/simple
# find the correct latest .so??? unless I delete it...
#echo "ldd ./simple after copy .so:"
# does not find it with . !
#cp ./build/libvncserver.so* ..
#ldd ./simple

echo "built."
